service: storage

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8001
      inMemory: true
      migration: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-west-1
  environment:
    NODE_ENV: ${self:provider.stage}
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - s3:Get*
        - s3:List*
      Resource: "arn:aws:s3:::staging.es6console.com"

functions:
  get:
    handler: api/get.handler
    events:
      - http:
          path: snippet/{id}
          method: get
          cors: true
  create:
    handler: api/create.handler
    events:
      - http:
          path: snippet/save
          method: post
          cors: true
  listExamples:
    handler: api/examples.handler
    events:
      - http:
          path: examples
          method: get
          cors: true
  listThemes:
    handler: api/themes.handler
    events:
      - http:
          path: themes
          method: get
          cors: true

resources:
  Resources:
    snippetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
